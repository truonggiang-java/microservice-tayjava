version: '3.8'
services:
   zookeeper:
      image: wurstmeister/zookeeper:latest
      environment:
#kafdrop for topic/msg visualization
         ZOOKEEPER_CLIENT_PORT: 2181
         ZOOKEEPER_TICK_TIME: 2000
      networks:
      - springboot-mysql-network
      ports:
      - 2181:2181
      - 2888:2888

      - 3888:3888
   kafka:
# kafka single node
      image: wurstmeister/kafka:latest
      restart: no
      links:
      - zookeeper
      ports:
      - 9092:9092
      networks:
      - springboot-mysql-network
      environment:
         KAFKA_BROKER_ID: 1
         KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
         KAFKA_LISTENERS: INTERNAL://:29092,EXTERNAL://:9092
         KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
         KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
         KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

   kafdrop:
#https://github.com/wurstmeister/kafka-docker/issues/553
      image: obsidiandynamics/kafdrop
      restart: no
      environment:
         KAFKA_BROKERCONNECT: kafka:29092
      ports:
      - 9000:9000
# JVM_OPTS: "-Xms16M -Xmx512M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
      depends_on:
      - kafka
      networks:
      - springboot-mysql-network
   mysql:
      image: mysql:8.0.33
      restart: always
      environment:
         MYSQL_ROOT_PASSWORD: 123456
      ports:
      - 3307:3306
      volumes:
      - mysql-data:/var/lib/mysql
      networks:
      - springboot-mysql-network
      healthcheck:
         test:
         - CMD
         - mysqladmin
         - ping
         - -h
         - localhost
         retries: 10
         interval: 3s
         timeout: 30s
   authentication-service:
      container_name: api-authentication-container
      build:
         context: ./authentication-service
         dockerfile: Dockerfile
      image: truonggiangjava99/authentication-service:latest
      env_file:
      - dev.env
      depends_on:
      - mysql
      - zipkin
      - service-registry
      - api-gateway
      - config-server
      ports:
      - 8081:8081
      networks:
      - springboot-mysql-network
      restart: unless-stopped
   account-service:
      container_name: api-account-container
      build:
         context: ./account-service
         dockerfile: Dockerfile
      image: truonggiangjava99/account-service:latest
      env_file:
      - dev.env
      depends_on:
      - mysql
      - zipkin
      - service-registry
      - api-gateway
      - config-server
      - kafka
      ports:
      - 8082:8082
      networks:
      - springboot-mysql-network
      restart: unless-stopped
   config-server:
      container_name: config-server-container
      build:
         context: ./config-server
         dockerfile: Dockerfile
      image: truonggiangjava99/config-server:latest
      env_file:
      - dev.env
      depends_on:
      - mysql
      - zipkin
      - service-registry
      - kafka
      ports:
      - 8888:8888
      networks:
      - springboot-mysql-network
   service-registry:
      container_name: service-server-container
      build:
         context: ./service-registry
         dockerfile: Dockerfile
      image: truonggiangjava99/service-registry:latest
      depends_on:
      - mysql
      - zipkin
      ports:
      - 8761:8761
      networks:
      - springboot-mysql-network
   api-gateway:
      container_name: spring-gateway-container
      build:
         context: ./api-gateway
         dockerfile: Dockerfile
      image: truonggiangjava99/api-gateway:latest
      env_file:
      - dev.env
      depends_on:
      - mysql
      - zipkin
      - service-registry
      - config-server
      ports:
      - 8080:8080
      networks:
      - springboot-mysql-network
      restart: unless-stopped
   zipkin:
      image: openzipkin/zipkin
      container_name: zipkin
      ports:
      - 9411:9411
      networks:
      - springboot-mysql-network
volumes:
   mysql-data: null
networks:
   springboot-mysql-network:
      driver: bridge